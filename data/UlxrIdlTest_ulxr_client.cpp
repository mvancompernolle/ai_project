///////////////////////////////////////////////////////////////////
// Automatically generated by xml2ulxr v1.7.5.
//
// xml2ulxr is part of Ultra Lightweight XML RPC for C++.
// See also http://ulxmlrpcpp.sourceforge.net
//
// Don't edit manually unless you know what you are doing
///////////////////////////////////////////////////////////////////

//#define ULXR_UNICODE_ONLY_HELPERS
#include <ulxmlrpcpp/ulxmlrpcpp.h> // always first

#include "UlxrIdlTest_ulxr_client.h"

#include <ulxmlrpcpp/ulxr_requester.h>

// mapped to UlxrIdlTest::first_url4_ovr4 (there are overloaded methods)
void UlxrIdlTestClient::first_url4()
{
  callTo_first_url4_ovr4.clear();
  sendCall(callTo_first_url4_ovr4);
}


// mapped to UlxrIdlTest::first_url4_ovr3 (there are overloaded methods)
std::string * UlxrIdlTestClient::first_url4(int i)
{
  callTo_first_url4_ovr3.clear();
  callTo_first_url4_ovr3.addParam(ulxr::Integer(i));
  ulxr::MethodResponse resp = sendCall(callTo_first_url4_ovr3);
  ulxr_refFor_first_url4_ovr3 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (std::string *) &ulxr_refFor_first_url4_ovr3;
}


// mapped to UlxrIdlTest::first_url4_ovr2 (there are overloaded methods)
std::string * UlxrIdlTestClient::first_url4(long int li)
{
  callTo_first_url4_ovr2.clear();
  callTo_first_url4_ovr2.addParam(ulxr::Integer(li));
  ulxr::MethodResponse resp = sendCall(callTo_first_url4_ovr2);
  ulxr_refFor_first_url4_ovr2 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (std::string *) &ulxr_refFor_first_url4_ovr2;
}


// mapped to UlxrIdlTest::first_url4_ovr1 (there are overloaded methods)
const char * UlxrIdlTestClient::first_url4(float li)
{
  callTo_first_url4_ovr1.clear();
  callTo_first_url4_ovr1.addParam(ulxr::Double(li));
  ulxr::MethodResponse resp = sendCall(callTo_first_url4_ovr1);
  ulxr_refFor_first_url4_ovr1 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (const char *) ulxr_refFor_first_url4_ovr1.c_str();
}


// mapped to UlxrIdlTest::first_url4_ovr0 (there are overloaded methods)
wchar_t * const UlxrIdlTestClient::first_url4(double li)
{
  callTo_first_url4_ovr0.clear();
  callTo_first_url4_ovr0.addParam(ulxr::Double(li));
  ulxr::MethodResponse resp = sendCall(callTo_first_url4_ovr0);
  ulxr_refFor_first_url4_ovr0 = (std::wstring) ulxr::getUnicode(ulxr::RpcString(resp.getResult()).getString());
  return (wchar_t * const) ulxr_refFor_first_url4_ovr0.c_str();
}


// mapped to UlxrIdlTest::constTest
std::string UlxrIdlTestClient::constTest() const
{
  callTo_constTest.clear();
  ulxr::MethodResponse resp = sendCall(callTo_constTest);
  return (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
}


// mapped to UlxrIdlTest::constRefTest
std::string & UlxrIdlTestClient::constRefTest() const
{
  callTo_constRefTest.clear();
  ulxr::MethodResponse resp = sendCall(callTo_constRefTest);
  ulxr_refFor_constRefTest = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return ulxr_refFor_constRefTest;
}


// mapped to UlxrIdlTest::firstViewConst
long int * UlxrIdlTestClient::firstViewConst() const
{
  callTo_firstViewConst.clear();
  ulxr::MethodResponse resp = sendCall(callTo_firstViewConst);
  ulxr_refFor_firstViewConst = (long int) ulxr::Integer(resp.getResult()).getInteger();
  return (long int *) &ulxr_refFor_firstViewConst;
}


// mapped to UlxrIdlTest::firstView
std::string * UlxrIdlTestClient::firstView()
{
  callTo_firstView.clear();
  ulxr::MethodResponse resp = sendCall(callTo_firstView);
  ulxr_refFor_firstView = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (std::string *) &ulxr_refFor_firstView;
}


// mapped to UlxrIdlTest::nextView1
std::wstring * UlxrIdlTestClient::nextView1(int i, long int * l, std::string & s, const bool * b, char c) const
{
  callTo_nextView1.clear();
  callTo_nextView1.addParam(ulxr::Integer(i));
  callTo_nextView1.addParam(ulxr::Integer(*l));
  callTo_nextView1.addParam(ulxr::RpcString(ULXR_GET_STRING(s)));
  callTo_nextView1.addParam(ulxr::Boolean(*b));
  callTo_nextView1.addParam(ulxr::Integer(c));
  ulxr::MethodResponse resp = sendCall(callTo_nextView1);
  ulxr_refFor_nextView1 = (std::wstring) ulxr::getUnicode(ulxr::RpcString(resp.getResult()).getString());
  return (std::wstring *) &ulxr_refFor_nextView1;
}


// mapped to UlxrIdlTest::nextView2
std::basic_string<char> * UlxrIdlTestClient::nextView2(int i, long int l, std::string & s, bool * const b, char c) const
{
  callTo_nextView2.clear();
  callTo_nextView2.addParam(ulxr::Integer(i));
  callTo_nextView2.addParam(ulxr::Integer(l));
  callTo_nextView2.addParam(ulxr::RpcString(ULXR_GET_STRING(s)));
  callTo_nextView2.addParam(ulxr::Boolean(*b));
  callTo_nextView2.addParam(ulxr::Integer(c));
  ulxr::MethodResponse resp = sendCall(callTo_nextView2);
  ulxr_refFor_nextView2 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (std::basic_string<char> *) &ulxr_refFor_nextView2;
}


// mapped to UlxrIdlTest::getNumObjects
void UlxrIdlTestClient::getNumObjects(std::string s)
{
  callTo_getNumObjects.clear();
  callTo_getNumObjects.addParam(ulxr::RpcString(ULXR_GET_STRING(s)));
  sendCall(callTo_getNumObjects);
}


// mapped to UlxrIdlTest::getObject
const std::basic_string<wchar_t> * UlxrIdlTestClient::getObject(const std::string & s)
{
  callTo_getObject.clear();
  callTo_getObject.addParam(ulxr::RpcString(ULXR_GET_STRING(s)));
  ulxr::MethodResponse resp = sendCall(callTo_getObject);
  ulxr_refFor_getObject = (std::wstring) ulxr::getUnicode(ulxr::RpcString(resp.getResult()).getString());
  return (const std::basic_string<wchar_t> *) &ulxr_refFor_getObject;
}


// mapped to UlxrIdlTest::getNumPages
int UlxrIdlTestClient::getNumPages(const std::wstring & s)
{
  callTo_getNumPages.clear();
  callTo_getNumPages.addParam(ulxr::RpcString(ULXR_GET_STRING(s)));
  ulxr::MethodResponse resp = sendCall(callTo_getNumPages);
  return (long int) ulxr::Integer(resp.getResult()).getInteger();
}


// mapped to UlxrIdlTest::last_url4_ovr0 (there are overloaded methods)
const std::string * UlxrIdlTestClient::last_url4()
{
  callTo_last_url4_ovr0.clear();
  ulxr::MethodResponse resp = sendCall(callTo_last_url4_ovr0);
  ulxr_refFor_last_url4_ovr0 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (const std::string *) &ulxr_refFor_last_url4_ovr0;
}


// mapped to UlxrIdlTest::last_url4_ovr1 (there are overloaded methods)
std::string * UlxrIdlTestClient::last_url4(int i)
{
  callTo_last_url4_ovr1.clear();
  callTo_last_url4_ovr1.addParam(ulxr::Integer(i));
  ulxr::MethodResponse resp = sendCall(callTo_last_url4_ovr1);
  ulxr_refFor_last_url4_ovr1 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (std::string *) &ulxr_refFor_last_url4_ovr1;
}


// mapped to UlxrIdlTest::last_url4_ovr2 (there are overloaded methods)
std::string * UlxrIdlTestClient::last_url4(long int li)
{
  callTo_last_url4_ovr2.clear();
  callTo_last_url4_ovr2.addParam(ulxr::Integer(li));
  ulxr::MethodResponse resp = sendCall(callTo_last_url4_ovr2);
  ulxr_refFor_last_url4_ovr2 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (std::string *) &ulxr_refFor_last_url4_ovr2;
}


