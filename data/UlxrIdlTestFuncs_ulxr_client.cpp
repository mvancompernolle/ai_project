///////////////////////////////////////////////////////////////////
// Automatically generated by xml2ulxr v1.7.5.
//
// xml2ulxr is part of Ultra Lightweight XML RPC for C++.
// See also http://ulxmlrpcpp.sourceforge.net
//
// Don't edit manually unless you know what you are doing
///////////////////////////////////////////////////////////////////

//#define ULXR_UNICODE_ONLY_HELPERS
#include <ulxmlrpcpp/ulxmlrpcpp.h> // always first

#include "UlxrIdlTestFuncs_ulxr_client.h"

#include <ulxmlrpcpp/ulxr_response.h>
#include <ulxmlrpcpp/ulxr_requester.h>
#include <ulxmlrpcpp/ulxr_except.h>

#include <memory>
#include <cassert>

#include "UlxrIdlTestFuncs_ulxr_names.h"

namespace {

ulxr::Requester *requester = 0;
ulxr::CppString  rpc_realm;
ulxr::CppString  rpc_user;
ulxr::CppString  rpc_pass;

ulxr::MethodResponse
  sendCall(const ulxr::MethodCall &calldata)
{
  assert(requester != 0);
  ulxr::MethodResponse resp = requester->call(calldata, rpc_realm, rpc_user, rpc_pass);

  if (!resp.isOK())
  {
    ulxr::Struct st = resp.getResult();
    int ec = ulxr::Integer(st.getMember(ULXR_PCHAR("faultCode"))).getInteger();
    ulxr::CppString es = ulxr::RpcString(st.getMember(ULXR_PCHAR("faultString"))).getString();
    throw ulxr::RuntimeException(ec, es);
  }

  return resp;
}

std::string ulxr_refFor_UlxrIdlTestFuncsinline_func__free_function2;
ulxr::MethodCall callTo_funcs__free_function1_ovr0(ULXR_CALLTO_UlxrIdlTestFuncs_funcs__free_function1_ovr0);  // mapped to: void funcs::free_function1(int i) (there are overloaded methods)
ulxr::MethodCall callTo_funcs__free_function1_ovr1(ULXR_CALLTO_UlxrIdlTestFuncs_funcs__free_function1_ovr1);  // mapped to: long int funcs::free_function1(long int i, float f) (there are overloaded methods)
ulxr::MethodCall callTo_inline_func__free_function2(ULXR_CALLTO_UlxrIdlTestFuncs_inline_func__free_function2);  // mapped to: std::string * inline_func::free_function2(long int * i, float f) (there are overloaded methods)

} // namespace


void UlxrIdlTestFuncs_setClientCredentials
  (ulxr::Requester &in_requester, const ulxr::CppString &realm,
   const ulxr::CppString &user, const ulxr::CppString &pass)
{
  requester = &in_requester;
  rpc_realm = realm;
  rpc_user = user;
  rpc_pass = pass;
}

namespace funcs {

// mapped to funcs__free_function1_ovr0 (there are overloaded methods)
void free_function1(int i)
{
  callTo_funcs__free_function1_ovr0.clear();
  callTo_funcs__free_function1_ovr0.addParam(ulxr::Integer(i));
  sendCall(callTo_funcs__free_function1_ovr0);
}

}

namespace funcs {

// mapped to funcs__free_function1_ovr1 (there are overloaded methods)
long int free_function1(long int i, float f)
{
  callTo_funcs__free_function1_ovr1.clear();
  callTo_funcs__free_function1_ovr1.addParam(ulxr::Integer(i));
  callTo_funcs__free_function1_ovr1.addParam(ulxr::Double(f));
  ulxr::MethodResponse resp = sendCall(callTo_funcs__free_function1_ovr1);
  return (long int) ulxr::Integer(resp.getResult()).getInteger();
}

}

namespace inline_func {

// mapped to inline_func__free_function2 (there are overloaded methods)
std::string * free_function2(long int * i, float f)
{
  callTo_inline_func__free_function2.clear();
  callTo_inline_func__free_function2.addParam(ulxr::Integer(*i));
  callTo_inline_func__free_function2.addParam(ulxr::Double(f));
  ulxr::MethodResponse resp = sendCall(callTo_inline_func__free_function2);
  ulxr_refFor_UlxrIdlTestFuncsinline_func__free_function2 = (std::string) ulxr::getLatin1(ulxr::RpcString(resp.getResult()).getString());
  return (std::string *) &ulxr_refFor_UlxrIdlTestFuncsinline_func__free_function2;
}

}

