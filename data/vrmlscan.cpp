#define yy_create_buffer Vrml_create_buffer
#define yy_delete_buffer Vrml_delete_buffer
#define yy_scan_buffer Vrml_scan_buffer
#define yy_scan_string Vrml_scan_string
#define yy_scan_bytes Vrml_scan_bytes
#define yy_flex_debug Vrml_flex_debug
#define yy_init_buffer Vrml_init_buffer
#define yy_flush_buffer Vrml_flush_buffer
#define yy_load_buffer_state Vrml_load_buffer_state
#define yy_switch_to_buffer Vrml_switch_to_buffer
#define yyin Vrmlin
#define yyleng Vrmlleng
#define yylex Vrmllex
#define yyout Vrmlout
#define yyrestart Vrmlrestart
#define yytext Vrmltext
#define yywrap Vrmlwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/nigels/cvs/glt/src/mesh/vrmlscan.cpp,v 1.26 2003/03/06 12:31:15 nigels Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if ( condition_holds )
 *      yyless( 5 );
 *  else
 *      do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        YY_RESTORE_YY_MORE_OFFSET \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
    {
    FILE *yy_input_file;

    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;       /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;      /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;     /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
    yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 208
#define YY_END_OF_BUFFER 209
static yyconst short int yy_accept[1370] =
    {   0,
        2,    2,  209,  208,    9,   11,  208,  208,    4,    2,
        2,    1,    1,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,    7,    8,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,    6,
        5,    9,    0,   12,    0,   10,    2,    1,    0,    2,
        0,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,    0,  207,    2,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,   15,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  150,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,    2,    3,  207,  207,  207,  207,  207,   22,  207,

      207,  207,  207,  203,  207,  207,  207,  207,   34,  207,
      207,  207,  207,  207,   41,  207,  207,  207,  207,  207,
       16,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  204,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,   86,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  126,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      187,  207,  207,  193,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,   26,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,   44,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
       13,   63,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  122,  207,
      124,  207,  207,  207,  207,  207,  207,  207,  134,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  167,  168,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  192,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,   24,  207,  207,  207,  207,  207,   14,  207,   36,
      207,  207,  207,  207,  207,  207,  207,  207,  205,  207,
      207,  207,  207,  207,  206,  207,  207,   57,   58,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,   92,  207,   96,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  121,
      207,  207,  207,  207,  207,  207,  207,  132,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  153,  154,  207,  207,  157,  207,
      159,  207,  207,  207,  164,  207,  207,  207,  171,  207,
      207,  207,  207,  176,  177,  207,  207,  207,  181,  207,
      207,  186,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,   17,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,   40,  207,  207,
      207,   46,  207,  207,  207,  207,  207,  207,  207,  207,
       56,   59,  207,   62,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,   83,   87,  207,   89,  207,  207,  207,   95,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  109,  110,  207,  207,  207,  207,  207,  207,  207,
      119,  207,  207,  207,  207,  207,  207,  207,  131,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  146,  149,  207,  207,  207,  207,  158,  207,  207,
      207,  207,  207,  207,  207,  172,  207,  207,  207,  207,
      207,  180,  207,  207,  207,  189,  207,  207,  194,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,   78,  207,  207,  207,
      207,  207,  207,  207,   90,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  108,  207,
      112,  207,  207,  207,  207,  207,  207,  207,  207,  125,
      207,  207,  207,  130,  207,  207,  207,  137,  207,  207,
      207,  207,  142,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  160,  161,  207,  207,  207,  207,  207,  207,
      173,  207,  207,  207,  207,  207,  184,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,   29,  207,  207,  207,  207,  207,  207,
      207,   42,  207,  207,  207,  207,  207,  207,  207,   52,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
       80,  207,   82,  207,  207,   88,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  114,  115,  207,  207,  207,  207,  207,  127,
      128,  207,  133,  135,  136,  207,  139,  207,  141,  143,
      207,  207,  207,  207,  207,  207,  155,  156,  162,  163,
      207,  207,  169,  170,  207,  207,  207,  179,  182,  207,

      207,  207,  207,  207,  207,  207,  207,  200,  207,  202,
      207,   19,  207,   21,   23,  207,  207,  207,  207,  207,
       33,   35,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,   61,  207,  207,  207,
      207,   68,   69,  207,   71,  207,  207,  207,  207,  207,
      207,  207,   81,  207,   85,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  105,  106,  207,  207,
      113,  207,  207,  118,  207,  123,  207,  138,  207,  207,
      207,  207,  207,  207,  152,  207,  166,  207,  207,  178,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

       18,   20,  207,   27,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,   51,  207,  207,  207,
      207,  207,  207,   66,  207,  207,  207,   73,  207,   75,
       76,  207,   79,  207,  207,   93,  207,   97,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  120,
      207,  207,  207,  207,  207,  207,  207,  207,  174,  207,
      207,  207,  207,  207,  207,  207,  197,  207,  199,  201,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,   50,  207,  207,  207,  207,  207,  207,
       67,  207,  207,   74,  207,  207,   91,  207,   98,  207,

      100,  207,  102,  207,  207,  207,  111,  116,  117,  129,
      140,  144,  207,  147,  207,  151,  207,  207,  207,  207,
      188,  190,  207,  207,  207,  198,  207,  207,  207,  207,
      207,   37,  207,  207,   43,  207,  207,  207,   49,  207,
      207,  207,   60,  207,  207,  207,  207,  207,   84,  207,
       99,  207,  103,  104,  207,  145,  207,  207,  207,  207,
      207,  191,  207,  207,  207,  207,  207,  207,   32,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  101,  107,  207,  207,  175,  183,  207,
      207,  207,  207,  207,   30,  207,   38,   39,   45,  207,

      207,  207,  207,  207,  207,  207,  207,  207,   77,   94,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,   54,  207,  207,  207,  207,  207,  148,  207,  207,
      195,  196,  207,  207,   31,  207,  207,  207,  207,  207,
       65,   70,   72,  165,  185,   25,  207,  207,  207,  207,
      207,   64,  207,   47,  207,  207,   55,  207,  207,  207,
      207,  207,   53,  207,  207,   28,  207,   48,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    6,    1,    1,    1,
        1,    1,    7,    8,    9,   10,    1,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   20,   20,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   31,   32,   20,   20,   20,
       33,    1,   34,    1,   20,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   20,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,    1,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[62] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    2,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1,    1,    3,    3,    3,    3,    3,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1
    } ;

static yyconst short int yy_base[1374] =
    {   0,
        0,    0, 1421, 1422, 1418, 1422, 1415, 1415, 1422,   52,
       54,   62,   65,   30,   46,   34,   51,   91,   57, 1366,
        0,   38, 1391,   61,   77,   81,   82, 1390,   71,   91,
     1386, 1370, 1363, 1422, 1422,   96,  119,  120,   72,  154,
      121,   78,   48,   75, 1357, 1371,  138,   81, 1360,   96,
      132,  141,  154,  166, 1357,  102, 1365,  166,  170, 1422,
     1422, 1404, 1401, 1422, 1401, 1422,  199,  202,  211,  214,
        0,    0, 1366, 1352, 1363, 1363, 1353, 1341,  181, 1351,
     1378, 1344,  127,  177,  181, 1355, 1340, 1370,  180, 1342,
     1355,  114, 1373, 1335, 1332, 1364, 1330, 1333, 1365,    0,

     1339, 1356, 1323, 1344,  190, 1329, 1347,  144, 1341, 1321,
      190, 1331, 1343, 1315, 1324, 1316, 1334, 1351,  195, 1316,
     1330, 1315, 1311, 1310, 1327, 1318, 1323, 1310,  165, 1305,
     1301, 1308,  194,  200,  196, 1302, 1317, 1301,  200, 1309,
      219, 1304, 1311,  214, 1300, 1299, 1298,  201, 1295, 1310,
      210,  209, 1286, 1295,  218,  222,  207, 1294, 1289, 1289,
     1299,    0, 1295, 1286, 1283,  222,  226,  229, 1285, 1293,
     1280, 1297, 1288,   29, 1272,  222,  243,  244, 1272, 1275,
     1277, 1291, 1275, 1278, 1286, 1270, 1278, 1277, 1269, 1275,
     1267,  269,    0, 1274, 1276, 1271, 1268, 1266,    0,  238,

     1272, 1259, 1266,    0, 1269, 1252, 1255, 1277,    0, 1251,
     1249, 1261, 1262, 1257,    0, 1260, 1255, 1275, 1253, 1248,
        0, 1255, 1264, 1253, 1243, 1242, 1246, 1231, 1258, 1240,
     1242, 1234, 1235, 1243, 1228, 1227, 1262, 1225, 1238, 1239,
     1227,    0, 1218, 1230, 1226, 1228, 1231, 1230, 1219, 1214,
     1214, 1220, 1207, 1216, 1219, 1208,    0, 1207, 1213, 1215,
      239, 1202, 1205, 1220, 1202, 1228, 1206, 1214, 1210, 1210,
     1203, 1195, 1210, 1230, 1201, 1197, 1213, 1188, 1192, 1192,
     1184, 1199, 1195, 1192, 1193, 1184, 1193, 1181, 1177, 1198,
     1187, 1174, 1185, 1186, 1189, 1173, 1183,  283,  285, 1168,

     1173, 1167, 1179, 1182, 1179, 1167, 1171, 1164, 1155, 1168,
     1169, 1170, 1166, 1172, 1160, 1157, 1165, 1164,  257, 1159,
     1150,  252,  253, 1152, 1148, 1148, 1154, 1150,  268, 1149,
      277, 1146, 1154,    0, 1139, 1148, 1153, 1142, 1153, 1140,
     1151, 1136, 1149, 1134, 1141, 1145, 1137, 1128,    0, 1140,
     1129, 1139, 1140, 1120, 1156, 1144, 1121, 1131, 1112, 1120,
     1116, 1127,    0, 1124, 1129, 1115, 1137, 1115, 1121, 1106,
     1105, 1114, 1139, 1120, 1104, 1114, 1114, 1100, 1128, 1112,
        0, 1094, 1119, 1104, 1093, 1094, 1107, 1104, 1102, 1105,
     1091, 1113, 1102, 1111, 1105,  276, 1102, 1085, 1083, 1092,

     1092, 1092, 1085, 1076, 1087, 1087, 1072, 1071, 1082, 1082,
     1069, 1065, 1081, 1104, 1064, 1069, 1079, 1067, 1074, 1053,
     1082, 1056, 1069, 1059, 1060, 1063, 1045, 1064,    0, 1054,
        0, 1058, 1065, 1045,  283, 1045, 1051, 1043,    0, 1044,
     1046, 1058, 1035, 1040, 1041, 1041, 1053, 1036, 1037, 1068,
     1049, 1044, 1034, 1034, 1038, 1026, 1025, 1026, 1018, 1021,
     1035, 1038, 1019, 1018, 1031, 1026,    0,    0, 1020, 1018,
     1028, 1028, 1021, 1020, 1008, 1023, 1021, 1006, 1029, 1009,
     1017, 1006, 1000, 1014, 1003, 1000,  998,    0, 1000, 1012,
     1005, 1007, 1008, 1005, 1006,  991,  990, 1025,  988,  989,

      985, 1015,  992,  996,  980,  979,  979,    0,  977,    0,
     1000,  989,  988,  983,  996,  989,  977,  969,    0,  992,
      992,  286,  976,  971,    0,  966,  963,    0,    0,  976,
      971,  971,  961,  972,  982,  969,  959,  964,  985,  957,
      953,  949,  962,  950,  960,  948,  959,  954,  953,  980,
      947,  942,  941,  952,  952,  289,  932,  967,  948,  958,
      945,  963,  940,  930,  928,  932,  936,  939,  927,  918,
      950,  924,  920,  942,  918,  932,  926,  915,  918,    0,
      914,  925,  918,  928,  913,  910,  918,    0,  916,  915,
      916,  919,  902,  905,  901,  911,  914,  901,  897,  893,

      901,  893,  892,  905,    0,    0,  900,  899,    0,  889,
        0,  887,  909,  895,  912,  888,  894,  888,    0,  894,
      884,  896,  884,    0,    0,  900,  885,  886,    0,  877,
      874,    0,  910,  877,  270,   39,   71,  170,  160,  251,
      269,  275,    0,  284,  276,  274,  289,  282,  278,  279,
      289,  286,  287,  288,  274,  294,  296,    0,  300,  297,
      284,  317,  304,  301,  302,  299,  304,  295,  302,  325,
        0,  319,  307,    0,  310,  302,  312,  303,  310,  308,
      307,  303,  322,  323,  319,  332,  334,  316,  315,  305,
      327,  331,  340,    0,  329,    0,  330,  323,  333,    0,

      325,  361,  336,  363,  329,  328,  340,  355,  340,  327,
      345,    0,    0,  344,  346,  328,  336,  337,  376,  349,
        0,  344,  350,  336,  341,  355,  370,  353,    0,  351,
      366,  356,  358,  365,  357,  363,  361,  363,  361,  367,
      376,  391,    0,  378,  361,  366,  363,    0,  390,  369,
      372,  371,  384,  378,  376,    0,  385,  381,  393,  386,
      383,    0,  380,  393,  384,    0,  399,  400,    0,  390,
      395,  386,  391,  388,  393,  394,  400,  390,  394,  397,
      394,  413,  398,  401,  402,  403,  407,  397,  437,  410,
      400,  415,  412,  408,  405,  415,  423,  412,  418,  414,

      420,  430,  428,  456,  420,  425,  423,  427,  433,  437,
      457,  431,  427,  429,  439,  434,    0,  431,  447,  434,
      438,  454,  439,  443,  463,  455,  443,  457,  448,  460,
      450,  446,  447,  486,  448,  454,  458,  466,    0,  475,
        0,  461,  462,  451,  462,  462,  470,  460,  461,    0,
      476,  477,  474,    0,  470,  473,  481,    0,  473,  469,
      470,  485,    0,  472,  473,  481,  480,  490,  477,  492,
      484,  475,    0,    0,  488,  487,  493,  485,  499,  488,
        0,  497,  490,  495,  504,  506,  516,  493,  494,  497,
      506,  507,  508,  511,  510,  513,  518,  507,  510,  521,

      512,  522,  509,  535,  516,  517,  518,  528,  515,  534,
      527,    0,  518,  523,  520,  531,  522,  524,  535,    0,
      557,  521,  527,  533,  529,  534,  533,  536,  534,  540,
      535,  536,  541,  543,  555,  550,  555,  536,  543,  558,
        0,  556,    0,  561,  554,    0,  558,  563,  572,  565,
      564,  553,  566,  569,  566,  561,  558,  564,  574,  599,
      572,  577,    0,    0,  576,  572,  566,  585,  563,    0,
        0,  581,    0,    0,    0,  570,    0,  581,    0,    0,
      582,  572,  589,  577,  586,  579,    0,    0,    0,    0,
      592,  580,    0,    0,  574,  619,  596,    0,  615,  586,

      585,  596,  601,  588,  596,  600,  595,    0,  596,    0,
      607,    0,  609,    0,    0,  597,  610,  611,  616,  633,
        0,    0,  599,  617,  607,  602,  609,  619,  610,  606,
      612,  609,  615,  636,  626,  614,    0,  618,  633,  618,
      621,    0,    0,  613,    0,  619,  634,  625,  622,  637,
      642,  627,    0,  636,    0,  633,  624,  643,  626,  638,
      642,  640,  636,  639,  643,  640,    0,    0,  642,  653,
        0,  647,  645,    0,  649,    0,  654,    0,  648,  649,
      664,  661,  670,  653,    0,  655,    0,  665,  656,    0,
      658,  672,  659,  660,  662,  653,  674,  676,  666,  667,

        0,    0,  666,  696,  670,  673,  669,  670,  683,  684,
      673,  704,  675,  679,  677,  678,    0,  677,  692,  681,
      684,  683,  687,    0,  685,  709,  699,    0,  691,    0,
        0,  687,    0,  687,  703,    0,  692,    0,  705,  696,
      707,  692,  700,  700,  696,  705,  696,  714,  703,    0,
      702,  708,  709,  705,  702,  721,  713,  709,    0,  717,
      726,  717,  719,  719,  731,  747,    0,  731,    0,    0,
      722,  724,  721,  753,  733,  738,  750,  751,  741,  733,
      732,  762,  745,    0,  746,  738,  737,  737,  751,  738,
        0,  752,  744,    0,  750,  742,    0,  742,    0,  748,

        0,  762,    0,  747,  746,  751,    0,    0,    0,    0,
        0,    0,  762,    0,  751,    0,  768,  755,  766,  754,
        0,    0,  749,  765,  774,    0,  764,  758,  763,  770,
      776,    0,  776,  777,    0,  777,  769,  771,    0,  769,
      769,  773,    0,  780,  784,  777,  774,  778,    0,  789,
        0,  783,    0,    0,  779,    0,  778,  779,  782,  777,
      795,    0,  789,  789,  803,  800,  789,  800,    0,  789,
      790,  795,  799,  793,  797,  799,  803,  802,  802,  800,
      810,  806,  798,    0,    0,  817,  814,    0,    0,  809,
      816,  819,  808,  811,    0,  821,    0,    0,    0,  829,

      826,  817,  816,  833,  834,  819,  822,  819,    0,    0,
      816,  825,  824,  823,  838,  829,  829,  827,  828,  831,
      837,    0,  831,  832,  839,  836,  830,    0,  841,  843,
        0,    0,  840,  843,    0,  844,  844,  860,  847,  858,
        0,    0,    0,    0,    0,    0,  852,  848,  851,  848,
      851,    0,  868,    0,  858,  856,    0,  853,  872,  857,
      860,  857,    0,  860,  863,    0,  862,    0, 1422,  913,
      916,  918,  919
    } ;

static yyconst short int yy_def[1374] =
    {   0,
     1369,    1, 1369, 1369, 1369, 1369, 1370, 1371, 1369, 1369,
     1369, 1369, 1369, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1369, 1369, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1369,
     1369, 1369, 1370, 1369, 1371, 1369, 1369, 1369, 1369, 1369,
     1373, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1369, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1369, 1373, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,    0, 1369,
     1369, 1369, 1369
    } ;

static yyconst short int yy_nxt[1484] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   21,   59,   60,
       61,   67,   68,   68,   70,   70,  317,   81,   69,   88,
       69,   67,   68,   68,   67,   68,   68,   73,   69,   74,
       76,   69,   79,   75,   91,   92,  148,  318,   77,  769,
       69,   80,   69,   82,   78,   94,  149,   83,   99,   84,

       69,   85,   85,   69,  100,   89,   96,  108,  102,   95,
      138,   97,  109,  770,  139,  157,  146,  113,   71,  110,
      111,  150,  151,  158,  103,   98,  112,  104,  147,  114,
      105,  101,  106,  115,  159,  161,   86,  192,  192,  116,
      185,  117,  121,  162,  186,  122,  163,   87,  123,  124,
      125,  213,  126,  127,  128,  142,  131,  129,  132,  214,
       83,  133,   84,  143,   85,   85,  164,  130,  134,  144,
      135,  145,  154,  136,  165,  168,  155,  137,  230,  169,
      166,  188,  167,  170,  771,  190,  156,   85,   85,  171,
      172,   85,   85,  189,  231,  173,  174,  191,  175,  254,

      140,  141,  176,  177,  179,  255,  178,  772,  180,   70,
       70,   67,   68,   68,  181,   69,  182,   83,   69,   83,
      209,  192,  192,  183,   70,   70,  200,  210,  201,  202,
       69,  234,  226,  243,  264,  282,  259,   69,  235,  269,
       69,  227,  260,  283,  265,  261,  244,  262,  263,  286,
      270,  271,   69,  273,  277,  288,  274,  292,  295,  297,
      289,  278,  287,  298,  306,  293,  310,  320,  308,  469,
      296,  470,  294,  307,  309,  321,  311,  322,  325,  192,
      192,  323,  482,  347,  403,  324,  348,  404,  473,  475,
      547,  476,  326,  773,  327,  441,  442,  446,  447,  443,

      444,  328,  448,  548,  474,  485,  486,  666,  445,  698,
      449,  585,  586,  667,  699,  767,  774,  775,  776,  768,
      483,  777,  778,  779,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  789,  790,  791,  792,  793,  794,  795,
      796,  797,  798,  799,  800,  801,  802,  803,  804,  805,
      806,  807,  808,  809,  810,  811,  812,  813,  814,  815,
      816,  817,  818,  819,  820,  821,  822,  824,  825,  823,
      826,  827,  828,  829,  830,  831,  832,  833,  834,  835,
      837,  838,  839,  840,  841,  842,  843,  844,  845,  847,
      846,  848,  849,  850,  851,  852,  853,  836,  854,  855,

      856,  857,  858,  859,  860,  861,  862,  863,  864,  865,
      866,  867,  869,  870,  871,  872,  868,  873,  874,  875,
      876,  877,  878,  879,  880,  881,  882,  883,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      896,  897,  898,  899,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  909,  910,  912,  913,  914,  911,  915,
      916,  917,  918,  919,  920,  921,  922,  923,  924,  925,
      926,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  940,  927,  941,  942,  943,  944,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,

      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
      966,  967,  968,  969,  970,  971,  972,  973,  974,  975,
      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  989,  990,  991,  992,  993,  994,  995,
      996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005,
     1007, 1008, 1009, 1010, 1011, 1006, 1012, 1013, 1014, 1015,
     1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,

     1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
     1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
     1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
     1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
     1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,

     1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
     1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226,
     1227, 1228, 1229, 1225, 1230, 1231, 1232, 1233, 1234, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
     1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,

     1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
     1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
     1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
     1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
     1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
     1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,

     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368,   63,   63,   63,   65,   65,   65,   72,
       72,  193,  766,  765,  764,  763,  762,  761,  760,  759,
      758,  757,  756,  755,  754,  753,  752,  751,  750,  749,
      748,  747,  746,  745,  744,  743,  742,  741,  740,  739,
      738,  737,  736,  735,  734,  733,  732,  731,  730,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,

      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      644,  643,  642,  641,  640,  639,  638,  637,  636,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
      604,  603,  602,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  584,  583,

      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  484,  481,  480,  479,  478,  477,

      472,  471,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  402,  401,  400,
      399,  398,  397,  396,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,

      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  346,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  319,
      316,  315,  314,  313,  312,  305,  304,  303,  302,  301,
      300,  299,  291,  290,  285,  284,  281,  280,  279,  276,
      275,  272,  268,  267,  266,  258,  257,  256,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  242,  241,  240,
      239,  238,  237,  236,  233,  232,  229,  228,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  212,
      211,  208,  207,  206,  205,  204,  203,  199,  198,  197,

      196,  195,  194,   66,   64,   62,  187,  184,  160,  153,
      152,  120,  119,  118,  107,   93,   90,   66,   64,   62,
     1369,    3, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369
    } ;

static yyconst short int yy_chk[1484] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   10,   10,   10,   11,   11,  174,   17,   10,   19,
       11,   12,   12,   12,   13,   13,   13,   14,   12,   14,
       15,   13,   16,   14,   22,   22,   43,  174,   15,  636,
       10,   16,   11,   17,   15,   24,   43,   18,   26,   18,

       12,   18,   18,   13,   26,   19,   25,   29,   27,   24,
       39,   25,   29,  637,   39,   48,   42,   30,   12,   29,
       29,   44,   44,   48,   27,   25,   29,   27,   42,   30,
       27,   26,   27,   30,   48,   50,   18,   83,   83,   30,
       56,   30,   36,   50,   56,   36,   50,   18,   36,   36,
       36,   92,   36,   37,   37,   41,   38,   37,   38,   92,
       40,   38,   40,   41,   40,   40,   51,   37,   38,   41,
       38,   41,   47,   38,   51,   52,   47,   38,  108,   52,
       51,   58,   51,   52,  638,   59,   47,   84,   84,   52,
       53,   85,   85,   58,  108,   53,   53,   59,   53,  129,

       40,   40,   53,   53,   54,  129,   53,  639,   54,   67,
       67,   68,   68,   68,   54,   67,   54,   69,   68,   69,
       89,   69,   69,   54,   70,   70,   79,   89,   79,   79,
       70,  111,  105,  119,  135,  148,  133,   67,  111,  139,
       68,  105,  133,  148,  135,  134,  119,  134,  134,  151,
      139,  139,   70,  141,  144,  152,  141,  155,  156,  157,
      152,  144,  151,  157,  166,  155,  168,  176,  167,  319,
      156,  319,  155,  166,  167,  176,  168,  177,  178,  192,
      192,  177,  329,  200,  261,  177,  200,  261,  322,  323,
      396,  323,  178,  640,  178,  298,  298,  299,  299,  298,

      298,  178,  299,  396,  322,  331,  331,  522,  298,  556,
      299,  435,  435,  522,  556,  635,  641,  642,  644,  635,
      329,  645,  646,  647,  648,  649,  650,  651,  652,  653,
      654,  655,  656,  657,  659,  660,  661,  662,  663,  664,
      665,  666,  667,  668,  669,  670,  672,  673,  675,  676,
      677,  678,  679,  680,  681,  682,  683,  684,  685,  686,
      687,  688,  689,  690,  691,  692,  693,  695,  697,  693,
      698,  699,  701,  702,  703,  704,  705,  706,  707,  708,
      709,  710,  711,  714,  715,  716,  717,  718,  719,  720,
      719,  722,  723,  724,  725,  726,  727,  708,  728,  730,

      731,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  744,  745,  746,  747,  742,  749,  749,  750,
      751,  752,  753,  754,  755,  757,  758,  759,  760,  761,
      763,  764,  765,  767,  768,  770,  771,  772,  773,  774,
      775,  776,  777,  778,  779,  780,  781,  782,  783,  784,
      785,  786,  787,  788,  789,  790,  791,  792,  789,  793,
      794,  795,  796,  797,  798,  799,  800,  801,  802,  803,
      804,  805,  806,  807,  808,  809,  810,  811,  812,  813,
      814,  815,  816,  818,  804,  819,  820,  821,  822,  823,
      824,  825,  826,  827,  828,  829,  830,  831,  832,  833,

      834,  835,  836,  837,  838,  840,  842,  843,  844,  845,
      846,  847,  848,  849,  851,  852,  853,  855,  856,  857,
      859,  860,  861,  862,  864,  865,  866,  867,  868,  869,
      870,  871,  872,  875,  876,  877,  878,  879,  880,  882,
      883,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  894,  895,  896,  897,  892,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  907,  908,  909,  910,  911,
      913,  914,  915,  916,  917,  918,  919,  921,  922,  923,
      924,  925,  926,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  942,  944,  945,

      947,  948,  949,  950,  951,  952,  953,  954,  955,  956,
      957,  958,  959,  960,  961,  962,  965,  966,  967,  968,
      969,  972,  976,  978,  981,  982,  983,  984,  985,  986,
      991,  992,  995,  996,  997,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1009, 1011, 1013, 1016, 1017, 1018,
     1019, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
     1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041,
     1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
     1069, 1070, 1072, 1073, 1075, 1077, 1079, 1080, 1081, 1082,

     1083, 1084, 1086, 1088, 1089, 1091, 1092, 1093, 1094, 1095,
     1096, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1107,
     1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118,
     1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1129, 1132,
     1134, 1135, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168,
     1171, 1172, 1173, 1166, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190,
     1192, 1193, 1195, 1196, 1198, 1200, 1202, 1204, 1205, 1206,

     1213, 1215, 1217, 1218, 1219, 1220, 1223, 1224, 1225, 1227,
     1228, 1229, 1230, 1231, 1233, 1234, 1236, 1237, 1238, 1240,
     1241, 1242, 1244, 1245, 1246, 1247, 1248, 1250, 1252, 1255,
     1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267,
     1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
     1279, 1280, 1281, 1282, 1283, 1286, 1287, 1290, 1291, 1292,
     1293, 1294, 1296, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
     1307, 1308, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
     1319, 1320, 1321, 1323, 1324, 1325, 1326, 1327, 1329, 1330,
     1333, 1334, 1336, 1337, 1338, 1339, 1340, 1347, 1348, 1349,

     1350, 1351, 1353, 1355, 1356, 1358, 1359, 1360, 1361, 1362,
     1364, 1365, 1367, 1370, 1370, 1370, 1371, 1371, 1371, 1372,
     1372, 1373,  634,  633,  631,  630,  628,  627,  626,  623,
      622,  621,  620,  618,  617,  616,  615,  614,  613,  612,
      610,  608,  607,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  587,
      586,  585,  584,  583,  582,  581,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,

      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  527,  526,  524,  523,  521,
      520,  518,  517,  516,  515,  514,  513,  512,  511,  509,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  438,  437,  436,  434,  433,

      432,  430,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  333,  332,  330,  328,  327,  326,  325,  324,

      321,  320,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  260,  259,  258,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  220,  219,  218,  217,  216,  214,

      213,  212,  211,  210,  208,  207,  206,  205,  203,  202,
      201,  198,  197,  196,  195,  194,  191,  190,  189,  188,
      187,  186,  185,  184,  183,  182,  181,  180,  179,  175,
      173,  172,  171,  170,  169,  165,  164,  163,  161,  160,
      159,  158,  154,  153,  150,  149,  147,  146,  145,  143,
      142,  140,  138,  137,  136,  132,  131,  130,  128,  127,
      126,  125,  124,  123,  122,  121,  120,  118,  117,  116,
      115,  114,  113,  112,  110,  109,  107,  106,  104,  103,
      102,  101,   99,   98,   97,   96,   95,   94,   93,   91,
       90,   88,   87,   86,   82,   81,   80,   78,   77,   76,

       75,   74,   73,   65,   63,   62,   57,   55,   49,   46,
       45,   33,   32,   31,   28,   23,   20,    8,    7,    5,
        3, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "vrmlscan.l"
#define INITIAL 0
#line 2 "vrmlscan.l"
/******************************************************************
*
*   VrmlScan.l
*
*   Lexer for VRML V2.0
*
*   Copyright (C) Satoshi Konno 1996
*   Copyright (C) ANCA Pty Ltd
*
*   NOTES:
*
*   PROTO, USE, DEF, ROUTE, protoName functionality has
*   been disabled.
*
******************************************************************/

#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;

#include <mesh/vrmlscan.h>

int VrmlCurrentLine = 1;
static char buffer[1024];

#define YY_NEVER_INTERACTIVE 1

#define input   yyinput
#define output  yyoutput

#define YY_DECL int Vrmllex YY_PROTO(( void ))
#define yylval  Vrmllval

#if 0
#define DEBUG(message) cerr << (message);
#else
#define DEBUG(mesage)
#endif

#line 1201 "lex.Vrml.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( yy_current_buffer->yy_is_interactive ) \
        { \
        int c = '*', n; \
        for ( n = 0; n < max_size && \
                 (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
            buf[n] = (char) c; \
        if ( c == '\n' ) \
            buf[n++] = (char) c; \
        if ( c == EOF && ferror( yyin ) ) \
            YY_FATAL_ERROR( "input in flex scanner failed" ); \
        result = n; \
        } \
    else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
          && ferror( yyin ) ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
    YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;

#line 44 "vrmlscan.l"


#line 1355 "lex.Vrml.c"

    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;   /* first start state */

        if ( ! yyin )
            yyin = stdin;

        if ( ! yyout )
            yyout = stdout;

        if ( ! yy_current_buffer )
            yy_current_buffer =
                yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )     /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start;
yy_match:
        do
            {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            if ( yy_accept[yy_current_state] )
                {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
                }
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 1370 )
                    yy_c = yy_meta[(unsigned int) yy_c];
                }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
            ++yy_cp;
            }
        while ( yy_base[yy_current_state] != 1422 );

yy_find_action:
        yy_act = yy_accept[yy_current_state];
        if ( yy_act == 0 )
            { /* have to back up */
            yy_cp = yy_last_accepting_cpos;
            yy_current_state = yy_last_accepting_state;
            yy_act = yy_accept[yy_current_state];
            }

        YY_DO_BEFORE_ACTION;


do_action:  /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */
            case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = yy_hold_char;
            yy_cp = yy_last_accepting_cpos;
            yy_current_state = yy_last_accepting_state;
            goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 46 "vrmlscan.l"
{ yylval.ival = atoi(yytext);           return NUMBER; }
    YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "vrmlscan.l"
{ yylval.fval = (float) atof(yytext);   return AFLOAT; }
    YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "vrmlscan.l"
{ sscanf(yytext, "0x%x", &yylval.ival); return NUMBER; }
    YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "vrmlscan.l"
{ return ','; }
    YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "vrmlscan.l"
{ return '}'; }
    YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "vrmlscan.l"
{ return '{'; }
    YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "vrmlscan.l"
{ return '['; }
    YY_BREAK
case 8:
YY_RULE_SETUP
#line 54 "vrmlscan.l"
{ return ']'; }
    YY_BREAK
case 9:
YY_RULE_SETUP
#line 56 "vrmlscan.l"
;
    YY_BREAK
case 10:
YY_RULE_SETUP
#line 57 "vrmlscan.l"
{ VrmlCurrentLine++; }
    YY_BREAK
case 11:
YY_RULE_SETUP
#line 58 "vrmlscan.l"
{ VrmlCurrentLine++; }
    YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "vrmlscan.l"
{ yytext[yyleng-1] = '\0'; yylval.sval = yytext+1;  return STRING; }
    YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "vrmlscan.l"
{ DEBUG("TRUE ");  yylval.bval = true;  return TRUEFALSE; }
    YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "vrmlscan.l"
{ DEBUG("FALSE "); yylval.bval = false; return TRUEFALSE; }
    YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "vrmlscan.l"
{ DEBUG("ON ");    yylval.bval = true;  return TRUEFALSE; }
    YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "vrmlscan.l"
{ DEBUG("FALSE "); yylval.bval = false; return TRUEFALSE; }
    YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "vrmlscan.l"
{ return ANCHOR; }
    YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "vrmlscan.l"
{ return APPEARANCE; }
    YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "vrmlscan.l"
{ return AUDIOCLIP; }
    YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "vrmlscan.l"
{ return BACKGROUND; }
    YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 "vrmlscan.l"
{ return BILLBOARD; }
    YY_BREAK
case 22:
YY_RULE_SETUP
#line 71 "vrmlscan.l"
{ return BOX; }
    YY_BREAK
case 23:
YY_RULE_SETUP
#line 72 "vrmlscan.l"
{ return COLLISION; }
    YY_BREAK
case 24:
YY_RULE_SETUP
#line 73 "vrmlscan.l"
{ return COLOR; }
    YY_BREAK
case 25:
YY_RULE_SETUP
#line 74 "vrmlscan.l"
{ return COLOR_INTERP; }
    YY_BREAK
case 26:
YY_RULE_SETUP
#line 75 "vrmlscan.l"
{ return CONE; }
    YY_BREAK
case 27:
YY_RULE_SETUP
#line 76 "vrmlscan.l"
{ return COORDINATE; }
    YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "vrmlscan.l"
{ return COORDINATE_INTERP; }
    YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "vrmlscan.l"
{ return CYLINDER; }
    YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "vrmlscan.l"
{ return CYLINDER_SENSOR; }
    YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "vrmlscan.l"
{ return DIRECTIONALLIGHT; }
    YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "vrmlscan.l"
{ return ELEVATION_GRID; }
    YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "vrmlscan.l"
{ return EXTRUSION; }
    YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "vrmlscan.l"
{ return FOG; }
    YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "vrmlscan.l"
{ return FONTSTYLE; }
    YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "vrmlscan.l"
{ return GROUP_NODE; }
    YY_BREAK
case 37:
YY_RULE_SETUP
#line 86 "vrmlscan.l"
{ return IMAGE_TEXTURE; }
    YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "vrmlscan.l"
{ return INDEXEDFACESET; }
    YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "vrmlscan.l"
{ return INDEXEDLINESET; }
    YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "vrmlscan.l"
{ return INLINE; }
    YY_BREAK
case 41:
YY_RULE_SETUP
#line 90 "vrmlscan.l"
{ return LOD; }
    YY_BREAK
case 42:
YY_RULE_SETUP
#line 91 "vrmlscan.l"
{ return MATERIAL; }
    YY_BREAK
case 43:
YY_RULE_SETUP
#line 92 "vrmlscan.l"
{ return MOVIE_TEXTURE; }
    YY_BREAK
case 44:
YY_RULE_SETUP
#line 93 "vrmlscan.l"
{ return NULL_STRING; }
    YY_BREAK
case 45:
YY_RULE_SETUP
#line 94 "vrmlscan.l"
{ return NAVIGATION_INFO; }
    YY_BREAK
case 46:
YY_RULE_SETUP
#line 95 "vrmlscan.l"
{ return NORMAL; }
    YY_BREAK
case 47:
YY_RULE_SETUP
#line 96 "vrmlscan.l"
{ return NORMAL_INTERP; }
    YY_BREAK
case 48:
YY_RULE_SETUP
#line 97 "vrmlscan.l"
{ return ORIENTATION_INTERP; }
    YY_BREAK
case 49:
YY_RULE_SETUP
#line 98 "vrmlscan.l"
{ return PIXEL_TEXTURE; }
    YY_BREAK
case 50:
YY_RULE_SETUP
#line 99 "vrmlscan.l"
{ return PLANE_SENSOR; }
    YY_BREAK
case 51:
YY_RULE_SETUP
#line 100 "vrmlscan.l"
{ return POINTLIGHT; }
    YY_BREAK
case 52:
YY_RULE_SETUP
#line 101 "vrmlscan.l"
{ return POINTSET; }
    YY_BREAK
case 53:
YY_RULE_SETUP
#line 102 "vrmlscan.l"
{ return POSITION_INTERP; }
    YY_BREAK
case 54:
YY_RULE_SETUP
#line 103 "vrmlscan.l"
{ return PROXIMITY_SENSOR; }
    YY_BREAK
case 55:
YY_RULE_SETUP
#line 104 "vrmlscan.l"
{ return SCALAR_INTERP; }
    YY_BREAK
case 56:
YY_RULE_SETUP
#line 105 "vrmlscan.l"
{ return SCRIPT; }
    YY_BREAK
case 57:
YY_RULE_SETUP
#line 106 "vrmlscan.l"
{ return SHAPE; }
    YY_BREAK
case 58:
YY_RULE_SETUP
#line 107 "vrmlscan.l"
{ return SOUND; }
    YY_BREAK
case 59:
YY_RULE_SETUP
#line 108 "vrmlscan.l"
{ return SPHERE; }
    YY_BREAK
case 60:
YY_RULE_SETUP
#line 109 "vrmlscan.l"
{ return SPHERE_SENSOR; }
    YY_BREAK
case 61:
YY_RULE_SETUP
#line 110 "vrmlscan.l"
{ return SPOTLIGHT; }
    YY_BREAK
case 62:
YY_RULE_SETUP
#line 111 "vrmlscan.l"
{ return SWITCH; }
    YY_BREAK
case 63:
YY_RULE_SETUP
#line 112 "vrmlscan.l"
{ return ATEXT; }
    YY_BREAK
case 64:
YY_RULE_SETUP
#line 113 "vrmlscan.l"
{ return TEXTURE_COORDINATE; }
    YY_BREAK
case 65:
YY_RULE_SETUP
#line 114 "vrmlscan.l"
{ return TEXTURE_TRANSFORM; }
    YY_BREAK
case 66:
YY_RULE_SETUP
#line 115 "vrmlscan.l"
{ return TIME_SENSOR; }
    YY_BREAK
case 67:
YY_RULE_SETUP
#line 116 "vrmlscan.l"
{ return TOUCH_SENSOR; }
    YY_BREAK
case 68:
YY_RULE_SETUP
#line 117 "vrmlscan.l"
{ return TRANSFORM; }
    YY_BREAK
case 69:
YY_RULE_SETUP
#line 118 "vrmlscan.l"
{ return VIEWPOINT; }
    YY_BREAK
case 70:
YY_RULE_SETUP
#line 119 "vrmlscan.l"
{ return VISIBILITY_SENSOR; }
    YY_BREAK
case 71:
YY_RULE_SETUP
#line 120 "vrmlscan.l"
{ return WORLD_INFO; }
    YY_BREAK
case 72:
YY_RULE_SETUP
#line 122 "vrmlscan.l"
{ return S_AMBIENT_INTENSITY; }
    YY_BREAK
case 73:
YY_RULE_SETUP
#line 123 "vrmlscan.l"
{ return S_APPEARANCE; }
    YY_BREAK
case 74:
YY_RULE_SETUP
#line 124 "vrmlscan.l"
{ return S_ATTENUATION; }
    YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "vrmlscan.l"
{ return S_AUTO_OFFSET; }
    YY_BREAK
case 76:
YY_RULE_SETUP
#line 126 "vrmlscan.l"
{ return S_AVATAR_SIZE; }
    YY_BREAK
case 77:
YY_RULE_SETUP
#line 127 "vrmlscan.l"
{ return S_AXIS_OF_ROTATION;}
    YY_BREAK
case 78:
YY_RULE_SETUP
#line 128 "vrmlscan.l"
{ return S_BACKURL; }
    YY_BREAK
case 79:
YY_RULE_SETUP
#line 129 "vrmlscan.l"
{ return S_BBOXCENTER; }
    YY_BREAK
case 80:
YY_RULE_SETUP
#line 130 "vrmlscan.l"
{ return S_BBOXSIZE; }
    YY_BREAK
case 81:
YY_RULE_SETUP
#line 131 "vrmlscan.l"
{ return S_BERM_WIDTH; }
    YY_BREAK
case 82:
YY_RULE_SETUP
#line 132 "vrmlscan.l"
{ return S_BEGIN_CAP; }
    YY_BREAK
case 83:
YY_RULE_SETUP
#line 133 "vrmlscan.l"
{ return S_BOTTOM; }
    YY_BREAK
case 84:
YY_RULE_SETUP
#line 134 "vrmlscan.l"
{ return S_BOTTOMRADIUS; }
    YY_BREAK
case 85:
YY_RULE_SETUP
#line 135 "vrmlscan.l"
{ return S_BOTTOMURL; }
    YY_BREAK
case 86:
YY_RULE_SETUP
#line 136 "vrmlscan.l"
{ DEBUG("ccw "); return S_CCW; }
    YY_BREAK
case 87:
YY_RULE_SETUP
#line 137 "vrmlscan.l"
{ return S_CENTER; }
    YY_BREAK
case 88:
YY_RULE_SETUP
#line 138 "vrmlscan.l"
{ return S_CHILDREN; }
    YY_BREAK
case 89:
YY_RULE_SETUP
#line 139 "vrmlscan.l"
{ return S_CHOICE; }
    YY_BREAK
case 90:
YY_RULE_SETUP
#line 140 "vrmlscan.l"
{ return S_COLLIDE; }
    YY_BREAK
case 91:
YY_RULE_SETUP
#line 141 "vrmlscan.l"
{ return S_COLLIDETIME;}
    YY_BREAK
case 92:
YY_RULE_SETUP
#line 142 "vrmlscan.l"
{ return S_COLOR; }
    YY_BREAK
case 93:
YY_RULE_SETUP
#line 143 "vrmlscan.l"
{ return S_COLOR_INDEX; }
    YY_BREAK
case 94:
YY_RULE_SETUP
#line 144 "vrmlscan.l"
{ return S_COLOR_PER_VERTEX; }
    YY_BREAK
case 95:
YY_RULE_SETUP
#line 145 "vrmlscan.l"
{ return S_CONVEX; }
    YY_BREAK
case 96:
YY_RULE_SETUP
#line 146 "vrmlscan.l"
{ return S_COORD; }
    YY_BREAK
case 97:
YY_RULE_SETUP
#line 147 "vrmlscan.l"
{ return S_COORD_INDEX; }
    YY_BREAK
case 98:
YY_RULE_SETUP
#line 148 "vrmlscan.l"
{ return S_CREASE_ANGLE;}
    YY_BREAK
case 99:
YY_RULE_SETUP
#line 149 "vrmlscan.l"
{ return S_CROSS_SECTION; }
    YY_BREAK
case 100:
YY_RULE_SETUP
#line 150 "vrmlscan.l"
{ return S_CUTOFFANGLE; }
    YY_BREAK
case 101:
YY_RULE_SETUP
#line 151 "vrmlscan.l"
{ return S_CYCLE_INTERVAL; }
    YY_BREAK
case 102:
YY_RULE_SETUP
#line 152 "vrmlscan.l"
{ return S_DESCRIPTION; }
    YY_BREAK
case 103:
YY_RULE_SETUP
#line 153 "vrmlscan.l"
{ return S_DIFFUSECOLOR; }
    YY_BREAK
case 104:
YY_RULE_SETUP
#line 154 "vrmlscan.l"
{ return S_DIRECT_OUTPUT; }
    YY_BREAK
case 105:
YY_RULE_SETUP
#line 155 "vrmlscan.l"
{ return S_DIRECTION; }
    YY_BREAK
case 106:
YY_RULE_SETUP
#line 156 "vrmlscan.l"
{ return S_DISK_ANGLE; }
    YY_BREAK
case 107:
YY_RULE_SETUP
#line 157 "vrmlscan.l"
{ return S_EMISSIVECOLOR; }
    YY_BREAK
case 108:
YY_RULE_SETUP
#line 158 "vrmlscan.l"
{ return S_ENABLED; }
    YY_BREAK
case 109:
YY_RULE_SETUP
#line 159 "vrmlscan.l"
{ return S_END_CAP; }
    YY_BREAK
case 110:
YY_RULE_SETUP
#line 160 "vrmlscan.l"
{ return S_FAMILY; }
    YY_BREAK
case 111:
YY_RULE_SETUP
#line 161 "vrmlscan.l"
{ return S_FIELD_OF_VIEW; }
    YY_BREAK
case 112:
YY_RULE_SETUP
#line 162 "vrmlscan.l"
{ return S_FOG_TYPE; }
    YY_BREAK
case 113:
YY_RULE_SETUP
#line 163 "vrmlscan.l"
{ return S_FONTSTYLE; }
    YY_BREAK
case 114:
YY_RULE_SETUP
#line 164 "vrmlscan.l"
{ return S_FRONTURL; }
    YY_BREAK
case 115:
YY_RULE_SETUP
#line 165 "vrmlscan.l"
{ return S_GEOMETRY; }
    YY_BREAK
case 116:
YY_RULE_SETUP
#line 166 "vrmlscan.l"
{ return S_GROUNDANGLE; }
    YY_BREAK
case 117:
YY_RULE_SETUP
#line 167 "vrmlscan.l"
{ return S_GROUNDCOLOR; }
    YY_BREAK
case 118:
YY_RULE_SETUP
#line 168 "vrmlscan.l"
{ return S_HEADLIGHT; }
    YY_BREAK
case 119:
YY_RULE_SETUP
#line 169 "vrmlscan.l"
{ return S_HEIGHT; }
    YY_BREAK
case 120:
YY_RULE_SETUP
#line 170 "vrmlscan.l"
{ return S_HORIZONTAL; }
    YY_BREAK
case 121:
YY_RULE_SETUP
#line 171 "vrmlscan.l"
{ return S_IMAGE; }
    YY_BREAK
case 122:
YY_RULE_SETUP
#line 172 "vrmlscan.l"
{ return S_INFO; }
    YY_BREAK
case 123:
YY_RULE_SETUP
#line 173 "vrmlscan.l"
{ return S_INTENSITY; }
    YY_BREAK
case 124:
YY_RULE_SETUP
#line 174 "vrmlscan.l"
{ return S_JUMP; }
    YY_BREAK
case 125:
YY_RULE_SETUP
#line 175 "vrmlscan.l"
{ return S_JUSTIFY; }
    YY_BREAK
case 126:
YY_RULE_SETUP
#line 176 "vrmlscan.l"
{ return S_KEY; }
    YY_BREAK
case 127:
YY_RULE_SETUP
#line 177 "vrmlscan.l"
{ return S_KEYVALUE; }
    YY_BREAK
case 128:
YY_RULE_SETUP
#line 178 "vrmlscan.l"
{ return S_LANGUAGE; }
    YY_BREAK
case 129:
YY_RULE_SETUP
#line 179 "vrmlscan.l"
{ return S_LEFT2RIGHT; }
    YY_BREAK
case 130:
YY_RULE_SETUP
#line 180 "vrmlscan.l"
{ return S_LEFTURL; }
    YY_BREAK
case 131:
YY_RULE_SETUP
#line 181 "vrmlscan.l"
{ return S_LENGTH; }
    YY_BREAK
case 132:
YY_RULE_SETUP
#line 182 "vrmlscan.l"
{ return S_LEVEL; }
    YY_BREAK
case 133:
YY_RULE_SETUP
#line 183 "vrmlscan.l"
{ return S_LOCATION; }
    YY_BREAK
case 134:
YY_RULE_SETUP
#line 184 "vrmlscan.l"
{ return S_LOOP; }
    YY_BREAK
case 135:
YY_RULE_SETUP
#line 185 "vrmlscan.l"
{ return S_MATERIAL; }
    YY_BREAK
case 136:
YY_RULE_SETUP
#line 186 "vrmlscan.l"
{ return S_MAX_ANGLE; }
    YY_BREAK
case 137:
YY_RULE_SETUP
#line 187 "vrmlscan.l"
{ return S_MAX_BACK; }
    YY_BREAK
case 138:
YY_RULE_SETUP
#line 188 "vrmlscan.l"
{ return S_MAX_EXTENT; }
    YY_BREAK
case 139:
YY_RULE_SETUP
#line 189 "vrmlscan.l"
{ return S_MAX_FRONT; }
    YY_BREAK
case 140:
YY_RULE_SETUP
#line 190 "vrmlscan.l"
{ return S_MAX_POSITION; }
    YY_BREAK
case 141:
YY_RULE_SETUP
#line 191 "vrmlscan.l"
{ return S_MIN_ANGLE; }
    YY_BREAK
case 142:
YY_RULE_SETUP
#line 192 "vrmlscan.l"
{ return S_MIN_BACK; }
    YY_BREAK
case 143:
YY_RULE_SETUP
#line 193 "vrmlscan.l"
{ return S_MIN_FRONT; }
    YY_BREAK
case 144:
YY_RULE_SETUP
#line 194 "vrmlscan.l"
{ return S_MIN_POSITION; }
    YY_BREAK
case 145:
YY_RULE_SETUP
#line 195 "vrmlscan.l"
{ return S_MUST_EVALUATE; }
    YY_BREAK
case 146:
YY_RULE_SETUP
#line 196 "vrmlscan.l"
{ return AS_NORMAL; }
    YY_BREAK
case 147:
YY_RULE_SETUP
#line 197 "vrmlscan.l"
{ return S_NORMAL_INDEX; }
    YY_BREAK
case 148:
YY_RULE_SETUP
#line 198 "vrmlscan.l"
{ return S_NORMAL_PER_VERTEX; }
    YY_BREAK
case 149:
YY_RULE_SETUP
#line 199 "vrmlscan.l"
{ return S_OFFSET;}
    YY_BREAK
case 150:
YY_RULE_SETUP
#line 200 "vrmlscan.l"
{ return S_ON; }
    YY_BREAK
case 151:
YY_RULE_SETUP
#line 201 "vrmlscan.l"
{ return S_ORIENTATION; }
    YY_BREAK
case 152:
YY_RULE_SETUP
#line 202 "vrmlscan.l"
{ return S_PARAMETER; }
    YY_BREAK
case 153:
YY_RULE_SETUP
#line 203 "vrmlscan.l"
{ return S_PICTH; }
    YY_BREAK
case 154:
YY_RULE_SETUP
#line 204 "vrmlscan.l"
{ return S_POINT; }
    YY_BREAK
case 155:
YY_RULE_SETUP
#line 205 "vrmlscan.l"
{ return S_POSITION; }
    YY_BREAK
case 156:
YY_RULE_SETUP
#line 206 "vrmlscan.l"
{ return S_PRIORITY; }
    YY_BREAK
case 157:
YY_RULE_SETUP
#line 207 "vrmlscan.l"
{ return S_PROXY; }
    YY_BREAK
case 158:
YY_RULE_SETUP
#line 208 "vrmlscan.l"
{ return S_RADIUS; }
    YY_BREAK
case 159:
YY_RULE_SETUP
#line 209 "vrmlscan.l"
{ return S_RANGE; }
    YY_BREAK
case 160:
YY_RULE_SETUP
#line 210 "vrmlscan.l"
{ return S_REPEAT_S; }
    YY_BREAK
case 161:
YY_RULE_SETUP
#line 211 "vrmlscan.l"
{ return S_REPEAT_T; }
    YY_BREAK
case 162:
YY_RULE_SETUP
#line 212 "vrmlscan.l"
{ return S_RIGHTURL; }
    YY_BREAK
case 163:
YY_RULE_SETUP
#line 213 "vrmlscan.l"
{ return S_ROTATION; }
    YY_BREAK
case 164:
YY_RULE_SETUP
#line 214 "vrmlscan.l"
{ return S_SCALE; }
    YY_BREAK
case 165:
YY_RULE_SETUP
#line 215 "vrmlscan.l"
{ return S_SCALEORIENTATION; }
    YY_BREAK
case 166:
YY_RULE_SETUP
#line 216 "vrmlscan.l"
{ return S_SHININESS; }
    YY_BREAK
case 167:
YY_RULE_SETUP
#line 217 "vrmlscan.l"
{ return S_SIDE; }
    YY_BREAK
case 168:
YY_RULE_SETUP
#line 218 "vrmlscan.l"
{ return S_SIZE; }
    YY_BREAK
case 169:
YY_RULE_SETUP
#line 219 "vrmlscan.l"
{ return S_SKYANGLE; }
    YY_BREAK
case 170:
YY_RULE_SETUP
#line 220 "vrmlscan.l"
{ return S_SKYCOLOR; }
    YY_BREAK
case 171:
YY_RULE_SETUP
#line 221 "vrmlscan.l"
{ return S_SOLID;}
    YY_BREAK
case 172:
YY_RULE_SETUP
#line 222 "vrmlscan.l"
{ return S_SOURCE; }
    YY_BREAK
case 173:
YY_RULE_SETUP
#line 223 "vrmlscan.l"
{ return S_SPACING; }
    YY_BREAK
case 174:
YY_RULE_SETUP
#line 224 "vrmlscan.l"
{ return S_SPATIALIZE; }
    YY_BREAK
case 175:
YY_RULE_SETUP
#line 225 "vrmlscan.l"
{ return S_SPECULARCOLOR; }
    YY_BREAK
case 176:
YY_RULE_SETUP
#line 226 "vrmlscan.l"
{ return S_SPEED; }
    YY_BREAK
case 177:
YY_RULE_SETUP
#line 227 "vrmlscan.l"
{ return S_SPINE; }
    YY_BREAK
case 178:
YY_RULE_SETUP
#line 228 "vrmlscan.l"
{ return S_STARTTIME; }
    YY_BREAK
case 179:
YY_RULE_SETUP
#line 229 "vrmlscan.l"
{ return S_STOPTIME; }
    YY_BREAK
case 180:
YY_RULE_SETUP
#line 230 "vrmlscan.l"
{ return S_STRING; }
    YY_BREAK
case 181:
YY_RULE_SETUP
#line 231 "vrmlscan.l"
{ return S_STYLE; }
    YY_BREAK
case 182:
YY_RULE_SETUP
#line 232 "vrmlscan.l"
{ return S_TEXCOORD; }
    YY_BREAK
case 183:
YY_RULE_SETUP
#line 233 "vrmlscan.l"
{ return S_TEXCOORD_INDEX;}
    YY_BREAK
case 184:
YY_RULE_SETUP
#line 234 "vrmlscan.l"
{ return S_TEXTURE; }
    YY_BREAK
case 185:
YY_RULE_SETUP
#line 235 "vrmlscan.l"
{ return S_TEXTURETRANSFORM; }
    YY_BREAK
case 186:
YY_RULE_SETUP
#line 236 "vrmlscan.l"
{ return S_TITLE; }
    YY_BREAK
case 187:
YY_RULE_SETUP
#line 237 "vrmlscan.l"
{ return S_TOP; }
    YY_BREAK
case 188:
YY_RULE_SETUP
#line 238 "vrmlscan.l"
{ return S_TOP2BOTTOM; }
    YY_BREAK
case 189:
YY_RULE_SETUP
#line 239 "vrmlscan.l"
{ return S_TOPURL; }
    YY_BREAK
case 190:
YY_RULE_SETUP
#line 240 "vrmlscan.l"
{ return S_TRANSLATION; }
    YY_BREAK
case 191:
YY_RULE_SETUP
#line 241 "vrmlscan.l"
{ return S_TRANSPARENCY; }
    YY_BREAK
case 192:
YY_RULE_SETUP
#line 242 "vrmlscan.l"
{ return S_TYPE; }
    YY_BREAK
case 193:
YY_RULE_SETUP
#line 243 "vrmlscan.l"
{ return S_URL; }
    YY_BREAK
case 194:
YY_RULE_SETUP
#line 244 "vrmlscan.l"
{ return S_VECTOR; }
    YY_BREAK
case 195:
YY_RULE_SETUP
#line 245 "vrmlscan.l"
{ return S_VISIBILITY_LIMIT; }
    YY_BREAK
case 196:
YY_RULE_SETUP
#line 246 "vrmlscan.l"
{ return S_VISIBILITY_RANGE; }
    YY_BREAK
case 197:
YY_RULE_SETUP
#line 247 "vrmlscan.l"
{ return S_WHICHCHILD; }
    YY_BREAK
case 198:
YY_RULE_SETUP
#line 248 "vrmlscan.l"
{ return S_WHICHCHOICE; }
    YY_BREAK
case 199:
YY_RULE_SETUP
#line 249 "vrmlscan.l"
{ return S_XDIMENSION; }
    YY_BREAK
case 200:
YY_RULE_SETUP
#line 250 "vrmlscan.l"
{ return S_XSPACING; }
    YY_BREAK
case 201:
YY_RULE_SETUP
#line 251 "vrmlscan.l"
{ return S_ZDIMENSION; }
    YY_BREAK
case 202:
YY_RULE_SETUP
#line 252 "vrmlscan.l"
{ return S_ZSPACING; }
    YY_BREAK
case 203:
YY_RULE_SETUP
#line 254 "vrmlscan.l"
{ return DEF;   }
    YY_BREAK
case 204:
YY_RULE_SETUP
#line 255 "vrmlscan.l"
{ return USE;   }
    YY_BREAK
case 205:
YY_RULE_SETUP
#line 256 "vrmlscan.l"
{ return PROTO; }
    YY_BREAK
case 206:
YY_RULE_SETUP
#line 257 "vrmlscan.l"
{ return ROUTE; }
    YY_BREAK
case 207:
YY_RULE_SETUP
#line 259 "vrmlscan.l"
{ yytext[yyleng] = '\0'; yylval.sval = yytext; DEBUG("name "); return NAME; }
    YY_BREAK
case 208:
YY_RULE_SETUP
#line 261 "vrmlscan.l"
ECHO;
    YY_BREAK
#line 2478 "lex.Vrml.c"
case YY_STATE_EOF(INITIAL):
    yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;
        YY_RESTORE_YY_MORE_OFFSET

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
                yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_current_buffer->yy_n_chars = yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );

        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = yy_start;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if ( yy_accept[yy_current_state] )
            {
            yy_last_accepting_state = yy_current_state;
            yy_last_accepting_cpos = yy_cp;
            }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
            {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 1370 )
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
    {
    register int yy_is_jam;
    register char *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
        {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_cp;
        }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 1370 )
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 1369);

    return yy_is_jam ? 0 : yy_current_state;
    }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_current_buffer->yy_n_chars =
            yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;


    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            int offset = yy_c_buf_p - yytext_ptr;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart( yyin );

                    /* fall through */

                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        return EOF;

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + offset;
                    break;
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;  /* cast for 8-bit char's */
    *yy_c_buf_p = '\0'; /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;


    return c;
    }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
    b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
    b->yy_is_interactive = 0;
#else
    b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
    }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

    {
    if ( ! b )
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
    {
    YY_BUFFER_STATE b;

    if ( size < 2 ||
         base[size-2] != YY_END_OF_BUFFER_CHAR ||
         base[size-1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

    b->yy_buf_size = size - 2;  /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer( b );

    return b;
    }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
    {
    int len;
    for ( len = 0; yy_str[len]; ++len )
        ;

    return yy_scan_bytes( yy_str, len );
    }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
    {
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = len + 2;
    buf = (char *) yy_flex_alloc( n );
    if ( ! buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

    for ( i = 0; i < len; ++i )
        buf[i] = bytes[i];

    buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer( buf, n );
    if ( ! b )
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
    }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
    {
    (void) fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
    }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
    {
    register int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif
#line 261 "vrmlscan.l"


int yywrap()
{
  return 1;
}

